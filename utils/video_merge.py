"""This is an example Python script that can be used to merge the frames
generated by CurVis in a single video.

Currently CurVis does not create a video, but puts all the frames as png
files within a tmp folder.

Here you need to specify the path to such folder."""

import cv2 # pip install opencv-python
from pathlib import Path

# --- Settings ---

framerate = 30
path_to_tmp_folder:Path = None # The folder containing the generated frames. If None, the script searches assumes "tmp" within the folder containing the script
path_to_output_folder:Path = None # Folder where you want the video to be saved. Defaults to the folder containing the script
video_stem = 'merged_video' # No extension.

# ----------------

# Checking path arguments

if path_to_tmp_folder is None:
    path_to_tmp_folder = Path(__file__).parent / 'tmp'

if path_to_output_folder is None:
    path_to_output_folder = Path(__file__).parent

def check_is_folder_and_exists(folder:Path) -> Path:

    if isinstance(folder, str):
        folder = Path(folder)
    if not isinstance(folder, Path):
        raise TypeError(f'"folder" must be a pathlib Path object (it is {type(folder)})')

    if not folder.exists():
        raise Exception(f"Folder {folder} does not exist.")
    if not folder.is_dir():
        raise Exception(f"{folder} is not a folder.")

    return folder

path_to_tmp_folder = check_is_folder_and_exists(path_to_tmp_folder)
path_to_output_folder = check_is_folder_and_exists(path_to_output_folder)

files = list(path_to_tmp_folder.glob('*.png')) # Finds all png files
if not files:
    raise Exception(f'No png files found within {path_to_tmp_folder}')

# Read the first image to get the size
img = cv2.imread(files[0])
height, width, layers = img.shape

# Define the codec and create VideoWriter object
fourcc = cv2.VideoWriter_fourcc(*'mp4v')
video_path = path_to_output_folder / (video_stem + '.mp4')

out = cv2.VideoWriter(video_path, fourcc, framerate, (width, height))

# Sorting frames by name
files = sorted(files, key=lambda x: int(x.stem.split('_')[1]))

print(f'Merging frames to {video_path}')

# Write the images to the video
for index, file in enumerate(files):
    print(f'Processing file {index+1}/{len(files)}...')
    img = cv2.imread(str(file))
    out.write(img)